package com.gsTech.telegramBot.utils;

import com.gsTech.telegramBot.DTO.EventDTO;
import com.gsTech.telegramBot.utils.enums.CallbackAction;
import com.gsTech.telegramBot.utils.enums.CreateCallbackAction;
import org.springframework.stereotype.Component;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.methods.updatingmessages.EditMessageText;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.InlineKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.InlineKeyboardButton;

import java.util.ArrayList;
import java.util.List;

@Component
public class SendMessageFactory {


    /**
     * Cria um objeto {@link SendMessage} com o texto especificado e o chatId do destinat√°rio.
     * @param chatId o id do chat para onde a mensagem ser√° enviada.
     * @param text mensagem a ser enviada
     * @return um objeto {@link SendMessage} pronto para envio
     */
    public SendMessage sendMessage(Long chatId, String text) {

        SendMessage message = new SendMessage();
        message.setChatId(chatId.toString());
        message.setText(text);

        return message;
    }


    /**
     * Cria um objeto {@link EditMessageText} para editar uma mensagem existente e adiciona um bot√£o
     * de "voltar ao menu".
     * @param chatId ID do chat onde a mensagem sera editada.
     * @param text Novo conte√∫do da mensagem
     * @param messageId ID da mensagem que sera editada
     * @return um objeto {@link EditMessageText} com o texto atualizado e um bot√£o de retorno ao menu.
     */
    public EditMessageText editMessageBackToMenu(Long chatId, String text, Integer messageId) {

        var message = new EditMessageText();
        message.setChatId(chatId.toString());
        message.setMessageId(messageId);
        message.setText(text);

        var backButton = new InlineKeyboardButton("\uD83D\uDD19 Voltar ao Menu");
        backButton.setCallbackData(CallbackAction.MENU.name());

        var row = List.of(backButton);

        List<List<InlineKeyboardButton>> rows = List.of(row);

        var markup = new InlineKeyboardMarkup();
        markup.setKeyboard(rows);

        message.setReplyMarkup(markup);

        return message;
    }


    /**
     * Cria uma nova mensagem do tipo {@link SendMessage} com um bot√£o de "voltar ao menu".
     * @param chatId ID do chat onde a mensagem ser√° enviada.
     * @param text mensagem a ser enviada.
     * @return um objeto {@link SendMessage} com o texto e um botao de retorno ao menu
     */
    public SendMessage sendMessageBackToMenu(Long chatId, String text) {

        var message = new SendMessage();
        message.setChatId(chatId.toString());
        message.setText(text);

        var backButton = new InlineKeyboardButton("\uD83D\uDD19 Voltar ao Menu");
        backButton.setCallbackData(CallbackAction.MENU.name());

        var row = List.of(backButton);

        List<List<InlineKeyboardButton>> rows = List.of(row);

        var markup = new InlineKeyboardMarkup();
        markup.setKeyboard(rows);

        message.setReplyMarkup(markup);

        return message;
    }


    /**
     * Cria um objeto {@link EditMessageText} para editar uma mensagem existente, atualizando seu conte√∫do e adicionando
     * um menu de op√ß√µes para intera√ß√£o do usu√°rio.
     * <p>
     * O menu inclui bot√µes para:
     * <ul>
     *   <li>‚ûï Nova tarefa</li>
     *   <li>üìã Listar tarefas</li>
     *   <li>‚úè Editar tarefa</li>
     *   <li>üóëÔ∏è Excluir tarefa</li>
     * </ul>
     *
     * @param chatId  ID do chat no Telegram onde a mensagem ser√° editada.
     * @param text    novo conte√∫do da mensagem.
     * @param messageId ID da mensagem que ser√° editada.
     * @return Um objeto {@link EditMessageText} contendo o texto atualizado
     *         e o teclado inline com as op√ß√µes de menu.
     */
    public EditMessageText editMessageWithMenu(Long chatId, String text, Integer messageId) {

        var message = new EditMessageText();
        message.setChatId(chatId.toString());
        message.setMessageId(messageId);
        message.setText(text);


        InlineKeyboardButton button1 = new InlineKeyboardButton("‚ûï Nova tarefa");
        button1.setCallbackData(CallbackAction.NEW_EVENT.name());

        InlineKeyboardButton button2 = new InlineKeyboardButton("\uD83D\uDCCB Listar tarefas");
        button2.setCallbackData(CallbackAction.LIST_EVENTS.name());

        InlineKeyboardButton button3 = new InlineKeyboardButton("‚úè Editar");
        button3.setCallbackData(CallbackAction.EDIT.name());

        InlineKeyboardButton button4 = new InlineKeyboardButton("\uD83D\uDDD1\uFE0F Excluir tarefa");
        button4.setCallbackData(CallbackAction.DELETE.name());

        var row1 = List.of(button1);
        var row2 = List.of(button2);
        var row3 = List.of(button3);
        var row4 = List.of(button4);

        List<List<InlineKeyboardButton>> rows = List.of(row1, row2, row3, row4);

        var markup = new InlineKeyboardMarkup();
        markup.setKeyboard(rows);

        message.setReplyMarkup(markup);

        return message;
    }


    /**
     * Cria uma mensagem do tipo {@link SendMessage} com um menu de bot√µes inline.
     * <p>
     * O menu inclui os seguintes bot√µes:
     * <ul>
     *   <li>‚ûï Nova tarefa</li>
     *   <li>üìã Listar tarefas</li>
     *   <li>‚úè Editar</li>
     *   <li>üóëÔ∏è Excluir tarefa</li>
     * </ul>
     *
     * @param chatId  identificador do chat para onde a mensagem ser√° enviada
     * @param text  texto que ser√° exibido na mensagem
     * @return um objeto {@link SendMessage} com o texto e o menu de bot√µes configurados
     */
    public SendMessage sendMessageWithMenu(Long chatId, String text) {

        var message = new SendMessage();
        message.setChatId(chatId.toString());
        message.setText(text);

        InlineKeyboardButton button1 = new InlineKeyboardButton("‚ûï Nova tarefa");
        button1.setCallbackData(CallbackAction.NEW_EVENT.name());

        InlineKeyboardButton button2 = new InlineKeyboardButton("\uD83D\uDCCB Listar tarefas");
        button2.setCallbackData(CallbackAction.LIST_EVENTS.name());

        InlineKeyboardButton button3 = new InlineKeyboardButton("‚úè Editar");
        button3.setCallbackData(CallbackAction.EDIT.name());

        InlineKeyboardButton button4 = new InlineKeyboardButton("\uD83D\uDDD1\uFE0F Excluir tarefa");
        button4.setCallbackData(CallbackAction.DELETE.name());

        var row1 = List.of(button1);
        var row2 = List.of(button2);
        var row3 = List.of(button3);
        var row4 = List.of(button4);

        List<List<InlineKeyboardButton>> rows = List.of(row1, row2, row3, row4);

        var markup = new InlineKeyboardMarkup();
        markup.setKeyboard(rows);

        message.setReplyMarkup(markup);

        return message;
    }


    /**
     * Cria uma mensagem do tipo {@link SendMessage} com bot√µes inline para
     * voltar ao menu e salvar.
     * <p>
     * Os bot√µes dispon√≠veis s√£o:
     * <ul>
     *   <li>üîô Voltar ao Menu</li>
     *   <li>üíæ Salvar</li>
     * </ul>
     *
     * @param chatId o identificador do chat para onde a mensagem ser√° enviada
     * @param text o texto que ser√° exibido na mensagem
     * @return um objeto {@link SendMessage} contendo o texto e os bot√µes configurados
     */
    public SendMessage sendMessageWithBackTAndSave(Long chatId, String text) {

        SendMessage message = new SendMessage();
        message.setChatId(chatId.toString());
        message.setText(text);

        var backButton = new InlineKeyboardButton("\uD83D\uDD19 Voltar ao Menu");
        backButton.setCallbackData(CallbackAction.MENU.name());

        var saveButton = new InlineKeyboardButton("\uD83D\uDCBE Salvar");
        saveButton.setCallbackData(CallbackAction.SAVE_EVENT.name());

        List<InlineKeyboardButton> row = List.of(backButton, saveButton);
        List<List<InlineKeyboardButton>> keyboard = List.of(row);

        var markup = new InlineKeyboardMarkup();
        markup.setKeyboard(keyboard);

        message.setReplyMarkup(markup);

        return message;
    }


    /**
     * Cria um objeto {@link EditMessageText} para editar uma mensagem existente
     * e adiciona um bot√£o inline para "Voltar ao Menu".
     * <p>
     * bot√£o:
     * <ul>
     *   <li>üîô Voltar ao Menu</li>
     * </ul>
     *
     * @param chatId ID do chat onde a mensagem ser√° editada
     * @param text  novo texto que substituir√° o conte√∫do da mensagem
     * @param messageId ID da mensagem que ser√° editada
     * @return um objeto {@link EditMessageText} com o texto atualizado e bot√£o configurado
     */
    public EditMessageText editMessageReturnBackMenu(Long chatId, String text, Integer messageId) {

        var message = new EditMessageText();
        message.setChatId(chatId.toString());
        message.setMessageId(messageId);
        message.setText(text);

        var backButton = new InlineKeyboardButton("\uD83D\uDD19 Voltar ao Menu");
        backButton.setCallbackData(CallbackAction.MENU.name());

        var row = List.of(backButton);

        List<List<InlineKeyboardButton>> rows = List.of(row);

        var markup = new InlineKeyboardMarkup();
        markup.setKeyboard(rows);

        message.setReplyMarkup(markup);

        return message;
    }


    /**
     * Cria um objeto {@link EditMessageText} para editar uma mensagem existente, que exibe uma lista de tarefas
     * com bot√µes para deletar cada tarefa, al√©m de um bot√£o para voltar ao menu.
     * <p>
     * Cada bot√£o cont√©m o nome da tarefa seguido de um √≠cone de exclus√£o (‚ùå)
     * e envia um callback com a a√ß√£o DELETE_EVENT e o ID da tarefa.
     * <p>
     * Ao final da lista, √© adicionado um bot√£o para voltar ao menu principal.
     *
     * @param chatId  ID do chat onde a mensagem ser√° editada
     * @param events lista de eventos/tarefas que ser√£o exibidos para sele√ß√£o
     * @param messageId identificador da mensagem que ser√° editada
     * @return um objeto {@link EditMessageText} com o texto e teclado inline configurados
     */
    public EditMessageText editEventDelete(Long chatId, List<EventDTO> events, Integer messageId) {

        String header = "Selecione a tarefa:\n\n";
        List<List<InlineKeyboardButton>> rows = new ArrayList<>();


        for (EventDTO event : events) {

            var deleteButton = new InlineKeyboardButton(" " + event.getEventName() + " ‚ùå");
            deleteButton.setCallbackData(CallbackAction.DELETE_EVENT.name() + ":" + event.getId());

            rows.add(List.of(deleteButton));
        }

        var backButton = new InlineKeyboardButton("\uD83D\uDD19 Voltar ao Menu");
        backButton.setCallbackData(CallbackAction.MENU.name());
        var back = List.of(backButton);
        rows.add(back);

        var markup = new InlineKeyboardMarkup();
        markup.setKeyboard(rows);

        var message = new EditMessageText();
        message.setChatId(chatId.toString());
        message.setMessageId(messageId);
        message.setText(header);
        message.setReplyMarkup(markup);

        return message;
    }


    /**
     * Cria um objeto {@link EditMessageText} para editar uma mensagem existente, que exibe uma lista de tarefas
     * com bot√µes para editar cada um, al√©m de um bot√£o para voltar ao menu.
     * <p>
     * Cada bot√£o representa uma tarefa e envia um callback com a a√ß√£o EDIT_EVENT e o ID do compromisso.
     * <p>
     *
     * @param chatId o identificador do chat onde a mensagem ser√° editada
     * @param events a lista de compromissos que ser√£o exibidos para sele√ß√£o
     * @param messageId o identificador da mensagem que ser√° editada
     * @return um objeto de {@link EditMessageText} com o texto e teclado inline configurados
     */
    public EditMessageText editMessageEditEvent(Long chatId, List<EventDTO> events, Integer messageId) {

        String header = "Escolha uma tarefa para editar:\n\n";
        List<List<InlineKeyboardButton>> rows = new ArrayList<>();

        for (EventDTO event : events) {

            var editButton = new InlineKeyboardButton(event.getEventName());
            editButton.setCallbackData(CallbackAction.EDIT_EVENT.name() + ":" + event.getId());

            rows.add(List.of(editButton));
        }

        var backButton = new InlineKeyboardButton("\uD83D\uDD19 Voltar ao Menu");
        backButton.setCallbackData(CallbackAction.MENU.name());
        var back = List.of(backButton);
        rows.add(back);

        var markup = new InlineKeyboardMarkup();
        markup.setKeyboard(rows);

        var message = new EditMessageText();
        message.setChatId(chatId.toString());
        message.setMessageId(messageId);
        message.setText(header);
        message.setReplyMarkup(markup);

        return message;
    }


    /**
     * Cria um objeto {@link EditMessageText} para editar uma mensagem existente, exibindo op√ß√µes de edi√ß√£o
     * para os campos de um compromisso espec√≠fico, com bot√µes para editar nome, descri√ß√£o e data.
     * <p>
     * Cada bot√£o envia um callback com a a√ß√£o correspondente para editar o campo selecionado.
     *
     * @param chatId o identificador do chat onde a mensagem ser√° editada
     * @param event o compromisso cujos campos poder√£o ser editados
     * @param messageId o identificador da mensagem que ser√° editada
     * @return um obejeto {@link EditMessageText} com o texto e teclado inline configurados
     */
    public EditMessageText editMessageEditOptions(Long chatId, EventDTO event, Integer messageId) {

        var markup = new InlineKeyboardMarkup();

        List<List<InlineKeyboardButton>> buttons = new ArrayList<>();

        buttons.add(List.of(buildButton("Editar nome", "EDIT_FIELD:NAME")));
        buttons.add(List.of(buildButton("Editar descri√ß√£o", "EDIT_FIELD:DESCRIPTION")));
        buttons.add(List.of(buildButton("Editar data", "EDIT_FIELD:DATE")));

        markup.setKeyboard(buttons);

        var message = new EditMessageText();
        message.setChatId(chatId.toString());
        message.setMessageId(messageId);
        message.setText("Selecione um campo para editar:\n" + event);
        message.setReplyMarkup(markup);

        return message;
    }


    /**
     * Cria um bot√£o inline para o teclado do Telegram com texto e callback personalizados.
     *
     * @param text o texto exibido no bot√£o
     * @param callBackData o dado enviado no callback quando o bot√£o √© pressionado
     * @return um objeto {@link InlineKeyboardButton} configurado com o texto e callback informados
     */
    private InlineKeyboardButton buildButton(String text, String callBackData) {

        var button = new InlineKeyboardButton();
        button.setText(text);
        button.setCallbackData(callBackData);
        return button;
    }

}
